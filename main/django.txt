Обычно используют трёх-уровневый подход:

	Базовый шаблон base.html, который описывает общий вид вашего сайта. Он меняется редко — или даже вообще никогда.
	Создаются base_SECTION.html шаблоны, один для каждой «секции» сайта (например — base_photos.html и base_forum.html). Эти шаблоны дополняют base.html и содержат в себе специфичные для раздела стили и дизайн.
	Создаются отдельные шаблоны для каждого типа страницы, таких как форум или фотогалерея, которые дополняют шаблон секции.

Вот несколько указаний для работы с наследованием шаблонов:

	При использовании тега {% extends %} — он должен быть первым тегом в шаблоне. Иначе наследование не будет работать.
	Как правило, чем больше тегов {% block %} в базовом шаблоне — тем лучше. Помните, что дочерние шаблоны не обязательно должны заполнять все родительские блоки, поэтому вы можете создать их заранее в необходимых местах и количестве, а затем заполнять по мере необходимости из дочерних шаблонов.
	Если вы видите, что повторяете один и тот же код во многих шаблонах — возможно вам стоит переместить этот код в блок {% block %} родительского шаблона.
	Если вам необходимо использовать код из блока родительского шаблона — используйте тег {{ block.super }}, который является особой переменной, позволяющей обратиться к родительскому шаблону. Это может быть полезно, если вы хотите дополнить родительских блок, а не полностью его перезаписывать.
	Нельзя использовать тег {% block %} с одним и тем же именем несколько раз в одном шаблоне. Это ограничение вызвано тем, что блоки работают  в «обоих направлениях». Т.е., тег {% block %} не только указывает место, в котором будет располагаться содержимое, но и выполняет его наполнение в родительском шаблоне. Поэтому, если у вас будет два блока с одним именем в шаблоне — родительский шаблон просто не будет знать, какой из них необходимо использовать.
	Шаблон, который вы передаёте с помощью {% extends %} загружается используя тот же метод, который используется get_template(). Таким образом, имя шаблона добавляется к параметру TEMPLATE_DIRS.
	В большинстве случаев, аргументом к {% extends %} будет строка, но вы так же можете использовать переменную, если не знаете имя родильского шаблона до момента запуска. Это позволяет вам делать классные и динамические сайты.

			Пример:
				from django.shortcuts import render
		 
			def index(request):
		    header = "Personal Data"                    # обычная переменная
		    langs = ["English", "German", "Spanish"]    # массив
		    user ={"name" : "Tom", "age" : 23}          # словарь
		    addr = ("Абрикосовая", 23, 45)              # кортеж
		 
		    data = {"header": header, "langs": langs, "user": user, "address": addr}
		    return render(request, "index.html", context=data)
		    В качестве третьего параметра в функцию render нам надо передать словарь, поэтому все данные оборачиваются в словарь и в таком виде передаются в шаблон.

			В этом случае шаблон мог бы выглядеть, например, следующим образом:
				<!DOCTYPE html>
					<html>
					<head>
					    <meta charset="utf-8" />
					    <title>Hello Django</title>
					</head>
					<body>
					    <h1>{{ header }}</h1>
					    <p>Name: {{ user.name}} Age: {{user.age}}</p>
					    <p>Address: ул. {{address.0}}, д. {{address.1}}, кв. {{address.2}}</p>
					    <p>Langs: {{langs.0}}, {{langs.1}}</p>
					</body>
					</html>

					Поскольку объекты langs и address представляют соответственно массив и кортеж, то мы можем обратиться к их элементам через индексы, как мы бы работали бы с ними в коде на Python, например, первый элемент кортежа address: address.0.

		            Подобным образом, поскольку объект user представляет словарь, то мы можем обратиться к его элементам по ключам name и age: {{ user.name}} {{user.age}}.