всегда проверяем 0
граничные значения (пример: ограничение 18, проверяем например -5,10,24,18,17,19)
цифры, символы, спецсимволы, очень большое число, очен длинный тескт
дата 01.01.1900 (часто ставят защиту от 00)

white box тесты - тесты когда ищут ошибку используя код.
black box тесты- тесты на уровне пользователя, через юзер интерфейс, без доступа к коду
gray box тесты - расширенный чёрный ящик, но до кода не расширяемся (например тесты связаные с лог файлами или базами данных)
жизненый цикл ПО - процесс создания ПО начиная с идеи и заканчивая выходом в свет ПО(5 стадий: идея, документация, разработка, тестировка, релиз)
регрессиононе тестирование - тестирование уже ранее тестируемого материала, после изменения кода(улучшение или баг)(проверяем исправлены ли найденые нами 
ошибки и не появились ли новые ошибки)

пример эквивалентных и граничных:
ввсети обязательно поле фамилия 31 символ вмещает поле
1)любая норм фамилия, например петров
2)фамилия из 31 буквы
3)фамилия из 32 букв
4)фамилия из 1 буквы
5)пробед
если поле фамилия не обязательно, то 4 и 5 можно не делать. так как относятся к пункту 1 по эквивалентности


проверка полей ввода проверяется на 1)буквы 2) цифры 3) символы; русский и англ языки

пример: при негативной проверке:
1) логин правильный пароль не правильный
2) логин не правильный, ароль правильный
3) оба поля не правильный - нет смысла вводить( так негативно мы проверили по очереди, и вместе негативно проверять это трата времени )

Для поиска технологической границы надо пихать «Войну и мир» во все доступные для ввода поля. ВО ВСЕ!


тест анализ - что мы тестируем
тест дизайн  - как мы это тестируем

серебренная пуля - проверка для любой абстрактной строки (шаблон так сказать)

тестирование ПО это процесс проверки с целью убеждения что всё сделано правильно(в соответствии с требованиями), а так же поиск несоответствий
в процессе проверки(баги)
Когда нам дают что-то потестировать, можно радостно кинуться ломать новые формочки, но нужно сначала проверить корректные сценарии. Сначала
удовлетворяем лояльных и грамотных пользователей, а потом уже делаем все остальное.
Таким образом, позитивное тестирование направлено на то, чтобы убедиться, что основной функционал работает. 
негативное тестирование- Это ввод заведомо некорректных данных. Вводим и смотрим, как ведет себя программа, понятные ли сообщения об ошибке выдает...


качество ПО:
1) с точки зрения потребителя это субъективно(понравилось или нет)
2) с точки зрения тестировщика это то насколько ПО соответствует ТЗ
можно добавить, что если ПО соответствует требованиям на 100% это не значит, что пользователь будет доволен ПО

Основные принцыпы написания баг репорта
«Шаги для воспроизведения» — основное поле для заполнения в баг-репорте.
Запишите шаги, которые вы определили. Как уже было сказано, шагов должно быть необходимо и достаточно для воспроизведения проблемы. Лишние 
не пишите. Необходимых тоже не пропускайте :)
После описания шагов обязательно напишите результат — что получилось.
Далее здесь же опишите ожидаемый результат, если это необходимо. Конечно, не стоит писать «Редактор не падает», но если, например, результаты 
расчетов не соответствуют ожидаемым, то это надо указывать.
Таким образом, описание шагов для воспроизведения должно выглядеть как-то так:
Шаги для воспроизведения:
1. Открыть…
2. Кликнуть…
3. Ввести в поле… значение N1
4. Ввести в поле… значение N2
4. Кликнуть кнопку Calculate

Результат:
В поле Result отображается V1.

Ожидаемый результат:
В поле Result отображается V2.

начинать с позитивных тест кейсов
эквивалентные классы: (пример: на сайт можно зайти с 18 до 100 лет.
класс 1 0-18, класс 2 18-100, класс 3 100+бесконечность,класс4 0 минус бесконечность)
гранчиные значения -1,0,1для класса1 17,18,19 для класса 2  99,100,101 для класса 3
на граничных значениях часто баги
регресионное тестирование: проверка работы проги после уже написаных багов.(ничего ли в провереном не испорчено)
SQL tutorial w3 schools сайт для практики скл 
смоук тестирование - проверка основного функционала, ради которого всё и затевалось
локализованое тестирование - тестирование под определенную местность, страну, город и тд
codeacademy сайт для учёбы кодировать



Классы Эквивалентности ноль не ноль:


	Всегда тестируй ноль!
	Всегда тестируй «ноль». Всегда:
	— Заказ пиццы? Купить ноль штук.
	— Калькулятор? Разделить на ноль.
	— Видеоплеер? Открыть файл размером ноль байт.


	Можно ли применить классы эквивалентности «ноль-не ноль» там, где числа исходно нет? Если мы вводим не числа, а буквы?
	*
	Тут нет чисел, только строковые поля
	Конечно, можно! Кладем наше поле на числовую ось и получаем класс «длина строки». Та-а-а-ак, допустимое имя по ТЗ — от 3 до 6 символов. Окей, а как насчет нуля? Что будет, если оставить строку пустой? 


Так мы применяем класс «ноль-не ноль».
	Длина имени: ноль / не ноль.
	Длина эл почты: ноль / не ноль.
	Длина пароля: ноль / не ноль.
	Длина названия организации: ноль / не ноль.
	...



	Учитесь видеть «ноль-не ноль» не только в числах и длине строк, но и в состояниях объекта:
	Пользователь авторизован / не авторизован.
	Заходил на сайт ранее / не заходил.
	Заполнял профиль / не заполнял.
	Аватарку загружал / не грузил.
	Деньги снимал / не снимал.
	Это самые крутые примеры


	Это самые крутые примеры класса, потому что о них не задумываются. Их пропускают. И именно поэтому их надо проверять. Как при поиске багов, так и при локализации конкретной ошибки: «Так-с, упало. А это всегда так или только при первом просмотре (раньше не смотрел — ноль, уже видел — не ноль)?».


	Не забывайте — ноль может быть не только на входе, но и на выходе!
	На входе:
	— Ввести ноль в числовое поле,
	— Оставить строку символов пустой.
	На выходе:
	— После совершения покупки баланс уйдет в ноль.
	— После обработки поле станет пустым.
	— Поиск вернет ноль результатов (хотя на входе у нас непустая строка поиска).
	— Отчет на указанную дату будет пустым (опять же, дата на входе была указана не-ноль).


	Вывод
	ИЩИ НОЛЬ!
	В числах
	В длине строки
	В состоянии (авторизован / нет)
	В выходных данных
	Везде ищи. Он есть!



баг это проблема для людей, чьё мнение для нас важно
сначала позитивные тесты а потом негативные

Тест-кейс — это профессиональная документация тестировщика, последовательность действий направленная на проверку какого-либо функционала, 
описывающая как придти к фактическому результату. 
Набор тест-кейсов называют тест-комплектом. Иногда тест-набор путают с тест-планом. Тест-план описывает какие работы, как
и когда должны быть проведены в рамках тестирования продукта, а так же что необходимо для их выполнения. 
Тест-кейсы должен помочь нам провести проверку продукта без ознакомления с всей документацией. Написанный 
один раз, удобный в поддержке тест-кейс сэкономит много времени и сил тестировщикам. 

Любой тест-кейс обязательно включает в себя: 
Уникальный идентификатор тест-кейса — необходим для удобной организации хранения и навигации по нашим тест-наборам.
Название — основная тема, или идея тест-кейса. Кратное описание его сути.
Предусловия — описание условий, которые не имеют прямого отношения к проверяемому функционалу, но должны быть выполнены. 
Например, оставить комментарий на вашем портале может только зарегистрированный пользователь. Значит для тест-кейса «Создание комментария» будет необходимо выполнение предусловия «пользователь зарегистрирован», и «пользователь авторизован»
Шаги — описание последовательности действий, которая должна привести нас к ожидаемому результату
Ожидаемый результат — результат: что мы ожидаем увидеть после выполнения шагов.


Не обязательно, но желательно добавить в тест-кейс атрибут история редактирования — это сильно облегчит вам жизнь. Лаконичный журнал изменений, где отраженно: кем, как, и когда был изменен тест-кейс. 

Что еще необходимо знать, перед созданием тест-кейса?

Во-первых, каждый выполненный тест-кейс, дает нам один из трех результатов:

1.Положительный результат, если фактический результат равен ожидаемому результату,
2.Отрицательный результат, если фактический результат не равен ожидаемому результату. В этом случае, найдена ошибка.
3.Выполнение теста блокировано, если после одного из шагов продолжение теста невозможно. В этом случае так же, найдена ошибка.

Во-вторых, одним тест-кейсом проверяется одна конкретная вещь, и для этой вещи должен быть только один ожидаемый результат. 

Чего не должно быть в тест-кейсе

1. Зависимостей от других тест-кейсов;
2. Нечеткой формулировки шагов или ожидаемого результата;
3. Отсутствия необходимой для прохождения тест-кейса информации;
4. Излишней детализации.

Первого следует избегать, потому что: связанный тест-кейс всегда может быть удален из-за ненадобности или он может быть изменен, в этом случае, станет непонятно как исполнить тест-кейс в которому, есть ссылки. 

Так же из-за зависимости тест-кейсов, может возникнуть ощущение, что тестируемый продукт уже приведет к нужному состоянию благодаря выполнению связанных тест-кейсов. 

Со вторым думаю все ясно. Если описание шагов или ожидаемое результата будет не четким, то это блокирует прохождение тест-кейса. 

В тест-кейса должно быть вся информация, которая необходима для его прохождения. Например, если мы проверяем окно логина на сайте, значит нам понадобится логин и пароль, иначе прохождение этого сценария будет невозможно.
Так же не следует слишком детализировать кейс. Например, если мы проверяем возможность создания комментария, то не стоит писать в каком угле экрана должно быть окно логина. Избыточная информация только затрудняет прохождение тест-кейса.

GUI - график юзер интерфейс.
Существуют требования к веб страницам

Жизненый цикл бага:
1) Баг найден
2) Баг описан
3) баг назначен человеку, который будет его исправлять, с приоритетом
4) баг починен
5) баг проверен после починки
6) баг закрыт

Bug report - это главный рабочий продукт деятельности большинства тестировщиков. Благодаря этому документу у других
людей составляется впечателение о вас как о профессионале. Чем лучше ваши отчеты об ошибках, чем лучше ваша репутация.
Один баг-репорт должен сообщать об одном баге. Если ошибки следуют одна из другой, создайте отдельные отчёты и сделайте 
ссылки друг на друга.

Как правильно заводить баг:
1)локализовать - найти те условия при которых баг повторяется(с минимальными для воспроизведения шагами)
(определить что конкретно ломает ПО)(поиск причины а не последствия).
Если используются какие-то входные данные, удостоверьтесь, что и они не содержат лишнего (действительно ли весь этот 
здоровенный кусок текста роняет редактор, а не один символ из него?).
  пример:
	в числовое поле можно вводить букву. не надо делать репорт о том, что можно ввести букву "а". надо убедиться, что в этом поле нет ограничения впринципе на буквы символы
	
2)придумать название - должно отвечать на что?где?когда? но при этом в одной фразе. Кратко,ёмко, конкретно
3)описать - шаги для воспроизведения, результат, ожидаемый результат. скрин желателен


тест план это - ресурсы, расписание, методология в общем фундоментальный труд, который не должен писать джуниор. В то время
как тест кейс это документация основаная на требованиях, которую пишет тестировщик


Позитивные тест кейсы для поля логин и пароль:
	1) логин и пароль введены правильно
	2) в поле пароль нельзя скопировать 
	3)поле  пароль спрятано звёздочками

Классы эквивалентности - есть значения и если они на выходе дают одинаковый результат, то я объединяю их в одну группу.
			 группа значений на входе тестируемой системы,приводящие к идентичному состоянию на выходе.
Юнит тестинг - это тестирование белого ящика, нужны познания в програмировании

monkey testing - бесцельные тесты в надежде чтонибудь гденибудь сломать и найти баг
AD hock тестирование - более вдумчивое чем манки, но всё равно мы не знаем куда мы идём
проверять букву "ё" она особенная и невходит в регулярку от а до я
открыть 2 браузера: в одном удалить заказ из корзины, в другом изменить количество товаров
открыть 2 браузера: в одном изменить фамилию в другом имя
интернет эксплорер 6 находит много багов
маштабируемость контрл +\- (моё проверить)

Когда есть возможность загрузить картинку или видео, то проверяем файл весом 0 кб, норм вес и тяжёлую картинку + разные форматы
Оставить приложение и отойти, чтобы оно погрузилось в спячку, и потом проверить его.
если проверяем адресс, то надо проверить тупики, проезды и тд. улицы которые совпадают с названием города

схема видов тестирования: 
По знанию системы:
		white box, black box, gray box
По позитивности:
		позитивное и негативное
По целям(объектам):
		функциональное
		не функциональное:совместимость, производительность, юзабилити(понятность),GUI(графический интерфейс)
		безопасность, локализация.
По осполнителям:
		 альфа (внутри фирмы) и бета(пользователи)
По времени проведения:	
			смоук
			регресионное
ПО степени автоматизации:
			ручное
			автоматизированое
По состоянию системы:
			статическая(тестирование документации, кода)
			динамическое(когда система запущена)
по формальности:
			исследовательское(без тест кейсов чек листов и тд)
			по собственной документации


нагрузочное тестирование:
возможность одновременной работы
		1)колво пользователей
		2)колво операций(load testing-когда на протяжение например 4 часов 70% нагрузки от макса и stress 
		testing когда 150% нагрузки от макса)
Jmeter утилита для нагрузочного тестирования

Тестирование производительности: это тестирование скорости работы


Модели:
Waterfall - водопад, когда действие идёт одно за одним, мы не можем начать тестировать пока не дадут код полностью.
	Часто используется в оборонке, медицине и тд. качество обычно выоское в этих моделях. но потихоньку изживает себя.
Agile - когда процесс тестирования идёт когда код написан частично. Более гибкая и современная модель


Чек Лист для документации:
	1)полнота - ничего ли не забыли?(пример. грузим файл(надо указать размеры допустимые и формат))
	2)точность - когда не возникает вопросов чтоже автор имел ввиду
	3)однозначность - когда текст не понимают по разному.(пример когда надо использовать безопасный пароль(понятие
безопасный пароль у всех разное))
	4)непротиворечивость - требования не должны противоречиьт сами себе
	5)необходимость - нужно ли так много текста?
	6)осуществимость - реальность в выполнении на практике
	7)тестируемость - сразу думать какие могут быть тесты и записывать их


Существует 3 вида границ: 	произвольная(та что в тз)
				технологическая(что позволяют нам технологии)
				логическая(0, 60 минут, 31 день в месяце и тд)				
	