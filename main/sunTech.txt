// добавляют и меняют хэш
<?
    use Bitrix\Main\Page\Asset;
    Asset::getInstance()->addJs(SITE_TEMPLATE_PATH . "/../../src/index.js");
    Asset::getInstance()->addCss(SITE_TEMPLATE_PATH . "/my.css");
    Asset::getInstance()->addCss(SITE_TEMPLATE_PATH . "/main.css");
    Asset::getInstance()->addJs("/dist/bundle.js");
?>
----------------------------------------------------------------------
{# src/styles/куча scss которые будем импортить в main.scss
в package.json компилируем scss в css
"scripts": {
    "sass": "npx node-sass --include-path node_modules --output-style compressed local/src/styles/main.scss > local/templates/2020/main.css"
  }, #}


webpack git ignore node_modules
---------------------------------------------------------------------
чтобы очищать bundle.js   - clean-webpack-plugin

webpack:
	const path = require('path'); // надо ли устанавливать?
	const {CleanWebpackPlugin} = require('clean-webpack-plugin');  // очищает старый bundle
	const MiniCssExtractPlugin = require('mini-css-extract-plugin'); // вычленияет css в отдельный файл из index.js
	const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin'); // минимизирует css файл
	const TerserJSPlugin = require('terser-webpack-plugin'); // минимизирует js файл


	module.exports = {
	    mode: 'development',
	    entry: './local/src/index.js',
	    output: {
	        filename: 'bundle.js',
	        path: path.resolve(__dirname, 'dist/company/js')
	    },
	    optimization: {
	        minimize: true,
	        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],
	    },
	    plugins: [
	        new CleanWebpackPlugin(),
	        new MiniCssExtractPlugin( {
	            filename: '../css/main2.css'  // вычленяем css из index.js в отдельный файл
	        })
	    ],
	    module: {
	        rules: [
	            {
	                test: /\.css$/,
	                use: ['style-loader','css-loader']
	            },
				// компилирует и минимизирует
	            {
	                test: /\.s[ac]ss$/i,
	                use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader'],
	            },
	        ]
	    }
	}

---------------------------------------------------------------
npm i -D webpack webpack-cli
package.json
	{
	  "name": "sunerzha.com",
	  "version": "1.0.0",
	  "description": "",
	  "main": "index.js",
	  "dependencies": {
	    "vue": "^2.6.12",
	    "webpack-chunk-hash": "^0.6.0" //?
	  },
	  "devDependencies": {
	    "clean-webpack-plugin": "^3.0.0",
	    "css-loader": "^4.3.0",
	    "extract-text-webpack-plugin": "^3.0.2", // ?
	    "html-webpack-plugin": "^4.4.1", // ?
	    "mini-css-extract-plugin": "^0.11.2",
	    "node-sass": "^4.14.1",
	    "optimize-css-assets-webpack-plugin": "^5.0.4",
	    "sass-loader": "^10.0.2",
	    "style-loader": "^1.2.1", // ?
	    "terser-webpack-plugin": "^4.2.2",
	    "vue-loader": "^15.9.3",  // обновлять вместе vue-loader и vue template compiler
	    "vue-template-compiler": "^2.6.12", // обновлять вместе vue-loader и vue template compiler
	    "webpack": "^4.44.2",
	    "webpack-cli": "^3.3.12"
	  },
	  "scripts": {
	    "dev": "webpack --mode development",
	    "build": "webpack --mode production"
	  },
	  "repository": {
	    "type": "git",
	    "url": "http://kysov.a%40qq.ru@bit:7990/scm/sun/sunerzha.com.git"
	  },
	  "author": "",
	  "license": "ISC"
	}
--------------------------------------------------
добавляем vue
	npm install -D vue-loader vue-template-compiler 
	npm install vue
webpack.config.js
	const  VueLoaderPlugin  = require('vue-loader/lib/plugin');	

	{
        test: /\.vue$/,
        loader: 'vue-loader'
    },

	resolve: {
        alias: {
            'vue$': 'vue/dist/vue.esm.js'
        },
        extensions: ['*', '.js', '.vue', '.json']
    },



итоговый webpack.config
	const path = require('path');
	const {CleanWebpackPlugin} = require('clean-webpack-plugin');
	const MiniCssExtractPlugin = require('mini-css-extract-plugin');
	const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
	const TerserJSPlugin = require('terser-webpack-plugin');
	const  VueLoaderPlugin  = require('vue-loader/lib/plugin');


	module.exports = {
	    mode: 'development',
	    entry:{
	        company: './local/src/index.js',
	    },
	    output: {
	        filename: '[name].js',
	        path: path.resolve(__dirname, 'dist/company/js')
	    },
	    optimization: {
	        minimize: true,
	        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],
	    },
	    plugins: [
	        new CleanWebpackPlugin(),
	        new MiniCssExtractPlugin( {
	            filename: '../css/main2.css'
	        }),
	        new VueLoaderPlugin()
	    ],
	    module: {
	        rules: [
	            {
	                test: /\.css$/,
	                use: ['style-loader','css-loader']
	            },

	            {
	                test: /\.s[ac]ss$/i,
	                use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader'],
	            },
	            {
	                test: /\.vue$/,
	                loader: 'vue-loader'
	            },
	        ]
	    },
	    resolve: {
	        alias: {
	            'vue$': 'vue/dist/vue.esm.js'
	        },
	        extensions: ['*', '.js', '.vue', '.json']
	    },
	}


-----------------------------------
теги используем ТОЛЬКО кебаб
на прямую переменные не вставляем в index.php и index.js. Делаем компонент и там описываем/чтобы не моргало {{msg}} 


import './styles/css/new.scss';
import './styles/company.scss';
import Vue from 'vue';
import Example from "./components/Example.vue";
//window.Vue = require('vue'); //?



// если скрипты в низу страницы то window.onload не нужен
window.onload = function () {
    const app = new Vue({
        el: '#app',
        data(){
            return{
                msg: '3',
            }
        },
        components: {
            Example
        }
    })
}


Example.vue :
		<template>
		  <div class="example">
		    <h1>{{title}}</h1>
		    <button @click="showSpan">click</button>
		    <span v-if="isShown">скрытый текст</span>
		    <mytest/>
		    <proba  />
		  </div>
		</template>
		<script>
		import Mytest from "./Mytest.vue";
		import Proba from "./Proba.vue"
		export default {
		  name: 'Example',
		  components: {
		    Mytest,
		    Proba
		  },
		  data(){
		    return {
		      title: 'Hello Vue',
		      isShown: false
		    }
		  },
		  methods: {
		    showSpan(){
		      this.isShown = !this.isShown
		    }
		  }
		}
		</script>

index.php
	 <div id="app">
      <example />
  </div>	




------------------------------------------------
устанавливаем babel
npm install -D babel-loader @babel/core @babel/preset-env


{
  test: /\.m?js$/,
  exclude: /(node_modules|bower_components)/,
  use: {
    loader: 'babel-loader',
    options: {
      presets: ['@babel/preset-env']
    }
  }
}







--------------------------------------------
webpack.config с бабелем
const path = require('path');
const {CleanWebpackPlugin} = require('clean-webpack-plugin');

const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const TerserJSPlugin = require('terser-webpack-plugin');
const  VueLoaderPlugin  = require('vue-loader/lib/plugin');


module.exports = {
    mode: 'development',
    entry:{
        company: './local/src/index.js',
    },
    output: {
        filename: '[name].js',
        path: path.resolve(__dirname, 'dist/company/js')
    },
    optimization: {
        minimize: true,
        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],
    },
    plugins: [
        new CleanWebpackPlugin(),
        new MiniCssExtractPlugin( {
            filename: '../css/main2.css'
        }),
        new VueLoaderPlugin()
    ],
    module: {
        rules: [
            {
                test: /\.css$/,
                use: ['style-loader','css-loader']
            },

            {
                test: /\.s[ac]ss$/i,
                use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader'],
            },
            {
                test: /\.vue$/,
                loader: 'vue-loader'
            },
            {
                test: /\.m?js$/,
                exclude: /(node_modules|bower_components)/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: ['@babel/preset-env']
                    }
                }
            }
        ]
    },
    resolve: {
        alias: {
            'vue$': 'vue/dist/vue.esm.js'
        },
        extensions: ['*', '.js', '.vue', '.json'] //говорит какие файлы надо понимать без разширения
    },
}






---------------------------------------------------------
подключаем vuex
	npm install vuex -D
store/store.js
	import Vuex from "vuex";
	import Vue from "vue";

	Vue.use(Vuex);

	export default new Vuex.Store({
	    state: {
	        counter: 5,
	    },
	    mutations: {
	        increment(state) {
	            state.counter++;
	        },
	        decrement(state) {
	            state.counter--;
	        },
	    },
	    actions: {
	        increment({ commit }) {
	            commit("increment");
	        },
	        decrement({ commit }) {
	            commit("decrement");
	        },
	    },
	    getters: {

	    }
	});



компонент vue
	<template>
      <button @click="increment">+</button>
      <span>{{counter}}</span>
      <button @click="decrement">-</button>
	</template>

index.js(точка входа)
	import './styles/about.scss';
	import Vue from 'vue';
	import About from "./components/About.vue";
	import store from './store/store.js';


	const about = new Vue({
	    store,
	    el: '#about',
	    components: {
	        About
	    }
	})	
	


финальная версия 

webpack.config.js
	const path = require('path');
const {CleanWebpackPlugin} = require('clean-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const TerserJSPlugin = require('terser-webpack-plugin');
const  VueLoaderPlugin  = require('vue-loader/lib/plugin');


module.exports = {
    mode: 'development',
    entry:{
        company: './local/src/index.js',
        about: './local/src/about.js'
    },
    output: {
        filename: '[name].js',
        path: path.resolve(__dirname, 'dist/company/js')
    },
    optimization: {
        minimize: true,
        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],
        splitChunks: {
            chunks: "all"
        }
    },
    plugins: [
        new CleanWebpackPlugin(),
        new MiniCssExtractPlugin( {
            // company: '../css/company.css',
            // about: '../css/about.css'
            filename: '../css/[name].css'
        }),
        new VueLoaderPlugin()
    ],
    module: {
        rules: [
            {
                test: /\.css$/,
                use: ['style-loader','css-loader']
            },

            {
                test: /\.s[ac]ss$/i,
                use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader'],
            },
            {
                test: /\.vue$/,
                loader: 'vue-loader'
            },
            {
                test: /\.m?js$/,
                exclude: /(node_modules|bower_components)/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: ['@babel/preset-env']
                    }
                }
            }
        ]
    },
    resolve: {
        alias: {
            'vue$': 'vue/dist/vue.esm.js'
        },
        extensions: ['*', '.js', '.vue', '.json']
    },
}

package.json:
{
  "name": "sunerzha.com",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "dependencies": {
    "vue": "^2.6.12",
    "webpack-chunk-hash": "^0.6.0"
  },
  "devDependencies": {
    "@babel/core": "^7.11.6",
    "@babel/preset-env": "^7.11.5",
    "babel-loader": "^8.1.0",
    "clean-webpack-plugin": "^3.0.0",
    "css-loader": "^4.3.0",
    "extract-text-webpack-plugin": "^3.0.2",
    "html-webpack-plugin": "^4.4.1",
    "mini-css-extract-plugin": "^0.11.2",
    "node-sass": "^4.14.1",
    "optimize-css-assets-webpack-plugin": "^5.0.4",
    "sass-loader": "^10.0.2",
    "style-loader": "^1.2.1",
    "terser-webpack-plugin": "^4.2.2",
    "vue-loader": "^15.9.3",
    "vue-template-compiler": "^2.6.12",
    "vuex": "^3.5.1",
    "webpack": "^4.44.2",
    "webpack-cli": "^3.3.12",
    "webpack-dev-server": "^3.11.0"
  },
  "scripts": {
    "dev": "webpack --mode development",
    "watch": "webpack --mode development --watch",
    "build": "webpack --mode production",
    "start": "webpack-dev-server --mode development"
  },
  "repository": {
    "type": "git",
    "url": "http://kysov.a%40qq.ru@bit:7990/scm/sun/sunerzha.com.git"
  },
  "author": "",
  "license": "ISC"
}
