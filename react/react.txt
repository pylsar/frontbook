Когда в App.js много import их лучше вынести в отдельный файл и использовать деструктуризацию	
названия классов всегда пишутся с большой буквы
статус 200 - означает что сервер все правильно нам отдал и мы все получили
props - не изменяются. мы создали компонент например с картинкой и все
state - динамическая структура
setState - устанавливает новое состояние
в JSX используем className вместо class
идентификатор key {} - пример. лента инстаграмм обновляет е сразу все посты а лишь те что изменились
реакт фрагмент <>тут подряд разные дивы</>(тоесть не обязательно всю верстку оборачивать в див)

компонент - это функция которая выдает html код синтаксисом JSX
если используем компонент вне файла его надо экспотировать и импортировать
экспорт : export default componentname;
импорт : import componentName from './../componentFile';
import React from 'react'; - импортируем библиотеку реакт из папки нод модулз
название компоненты пишется с большой буквы
	пример компонента:
				class MyComponent extends React.Component{
				    constructor(props) {
				    super(props);
				  }
				  render() {
				    return (
				      <div>
				        <h1>My First React Component!</h1>
				        </div>
				    );
				  }
				}
				ReactDOM.render(<MyComponent/>, document.getElementById('challenge-node'))

внутри JSX код JavaScript надо писать в {}
		
map() - метод нужен для того чтобы не писать много раз одно и тоже действие(т.е приходит 100 сообщений с сервера и map все их перебирает и выводит)
чемто похож на цикл
		пример:
				const MyPosts = () => {

				let postsData = [
					{id: 1, message: 'whats up', likesCount: 67},
					{id: 2, message: 'whats viber', likesCount: 26}
				]

				let postsElement = postsData.map( (posts) =>{
					return (
						<Post message={posts.message} likesCount={posts.likesCount} />
					)
				} )

				return (
					<div className={classes.posts_block}>	
						<div className={classes.posts}>
							{postsElement}
						</div>
					</div>
				)
			}
суть реакта сводится к тому что мы не работаем с дом элементами в привычном смысле (никаких document.getElementById, addEventListener)


чтобы вызвать state надо :
		class MyComponent extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {
		      name: 'freeCodeCamp'
		    }
		  }
		  render() {
		  const name = this.state.name;
		    return (
		      <div>
	  			<h1>{name}</h1>
		      </div>
		    );
		  }
		};

	или:
		class MyComponent extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {
		      name: 'freeCodeCamp'
		    }
		  }
		  render() {
		    return (
		      <div>
	  			<h1>{this.state.name}</h1>
		      </div>
		    );
		  }
		};

нерекомендуется напрямую изменять this.state для этого используем this.setState() 
	пример:
		class MyComponent extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {
		      name: 'Initial State'
		    };
		    this.handleClick = this.handleClick.bind(this);
		  }
		  handleClick() {
		this.setState({name: 'React Rocks!'});
		  }
		  render() {
		    return (
		      <div>
		        <button onClick={this.handleClick}>Click Me</button>
		        <h1>{this.state.name}</h1>
		      </div>
		    );
		  }
		};	
есть договоренность что: если свойство начинается с нижнего подчеркивания( пример this._hero=hero), то нельзя его менять напрямую

setState() - изменяет состояние.
	пример использования:
		this.setState((state, props) => ({
		  counter: state.counter + props.increment
		}));
	пример использования когда не нужны пропсы:
		this.setState(state => ({
		  counter: state.counter + 1
		}));

пример создания кнопки переключателя:
		class MyComponent extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {
		      visibility: false
		    };
		    this.toggleVisibility = this.toggleVisibility.bind(this);
		  }
		 toggleVisibility(){
		  this.setState(state =>{
		      if(state.visibility === true){
		        return {visibility: false}
		      }else {
		        return {visibility: true}
		      }
		    })};
		  render() {
		    if (this.state.visibility) {
		      return (
		        <div>
		          <button onClick={this.toggleVisibility}>Click Me</button>
		          <h1>Now you see me!</h1>
		        </div>
		      );
		    } else {
		      return (
		        <div>
		          <button onClick={this.toggleVisibility}>Click Me</button>
		        </div>
		      );
		    }
		  }
		};


пример кода где при клике на кнопки мы увеличиваем уменьшаем и сбрасываем в 0:
		class Counter extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {
		      count: 0
		    };
		this.increment = this.increment.bind(this);
		this.decrement = this.decrement.bind(this);
		this.reset = this.reset.bind(this);
		  }
		reset(){
		  this.setState((state) => ({
		    count: 0
		  }))
		}

		increment(){
		this.setState((state) =>({
		  count: state.count +1
		}))
		}

		decrement(){
		  this.setState((state)=> ({
		    count: state.count -1
		  }))
		}

		  render() {
		    return (
		      <div>
		        <button className='inc' onClick={this.increment}>Increment!</button>
		        <button className='dec' onClick={this.decrement}>Decrement!</button>
		        <button className='reset' onClick={this.reset}>Reset</button>
		        <h1>Current Count: {this.state.count}</h1>
		      </div>
		    );
		  }
		};

stateless(функциональные, тупые) компоненты - это компоненты без логики	

событие в реакте:
		событие onClick:
			пишем функцию которая будет отвечать за нужные нам действия. обычно пишутся внутри компонента перед return
			let addPost = () => {
				let text = newPostElement.current.value; 
				alert('text');
			}
		добавляем кнопке эту функцию в событии:
			<button onClick={addPost}>add post</button> // важный момент: мы не ставим у функции ()
		добавляем референсную ссылку(есть есть возможность обойтись без этого, то выбираем другой вариант)
			let newPostElement = React.createRef();
		прописываем откуда будем брать инфу:
			<textarea ref={newPostElement}></textarea>
			
экспорт функции не по дефолту пример:
 при создании функции начинаем со слова export пример:
	export let addPost = (postMessage) => {
    let newPost = {
        id: 3,
        message: postMessage,
        likesCount: 0 
    };
    state.profilePage.posts.push(newPost);
}
так же не забываем прописывать импорт через {} пример:
	import {addPost} from './redux/state';
когда мы создаем функцию в state.js мы начинаем ее прокидывать через пропсы до нужного компанента пример: 
		<Route path='/profile' render={ () => <Profile stateData={props.state.profilePage} addPost={props.addPost} /> }/>
		
при импорте экспорте логики важно не делать циклические зависимости
bind() - используем чтобы обезопасить себя( мы привязываем свойства к методу). тоесть если мы вызываем функцию bind не нужен, а если 
		мы передаём функцию в след компоненту то надо использовать bind
		используется только в классовых компонентах
		пример:
				let rerenderEntireTree = (state) =>{
					ReactDOM.render(<App 
						state={state} 
						addPost={store.addPost.bind(store)} 
						updateNewPostText={store.updateNewPostText.bind(store)} />,
						document.getElementById('root'));
				}	

условия в стилях:
		function Joke(props) {
		return (
			<div>
				<h3 style={{display: props.question ? "block" : "none"}}>Question: // если выполняется условие тогда ставим display: block, если нет - displat: none
				{props.question}</h3>
				<h3>Answer: {props.punchLine}</h3>
			</div>
			)
		}
		
-------------
toggle переключалка
			создадим массив там где будет переключалка
				const [visiblePopup, setVisiblePopup] = useState(false);
			на li вешаем функцию твечающую за переключение
				onClick ={()=> setVisiblePopup(!visiblePopup)}
			далее в родительском элементе ul прокидываем в пропсах onClick
				const List = ({ items, isRemovble , onClick})......
			и на ul вешаем onClick	
				<ul onClick={onClick} className="list">
-----------------				
переключалка:
class Dropdown extends Component {
		constructor(props){
		super(props);
		this.state = {isOpened: false}; // изначально задаем что выпадашка не показывается
	}

	toggleState() {
		this.setState({isOpened : !this.state.isOpened}); // переключаем состояние с true на false и обратно
	}
	
	render(){
		console.log('isOpened', this.state.isOpened);
		let dropdownText;
		if(this.state.isOpened){
			dropdownText = <div>some text</div>
		}
		return(){
			<div onClick={this.toggleState.bind(this)}>
				its dropdown baby
				{dropdowntext}
			</div>
		}
	}
}	
----------------------------
Пропсы
создаем массив с данными const todos=[
							{id:1, title: 'one'},
							{id:2, title: 'two'}
						]
далее в компоненте <Todo sometitle={todos}/>	
далее в дочернем компоненте принимаем в функцию props	
и пишем внутри return {sometitle.props.map((todo, index) =>{
						return <TodoItem todo={todo} key={todo.id} index={index}/>
					})}			
далее в компоненте TodoItem		функции передаем {todo} // 

	function TodoItem({todo, index}){
		return <li><strong>{index +1}</strong>{todo.title}</li>
	}		

		 	
----------
пустой div делается путем 
	<React.fragment></React.fragment>
так же можно упростить запись
	import React, {Fragment} from 'react'
	<fragment></fragment>


отобразить разметку если состояние подходит нам:
	const AddListButton () =>{
		const [visiblePopup, setVisiblePopup] = useState(false);
	return(
		{visiblePopup && <div className="add-button">   // тоесть если visiblePopup будет true, то разметка после него отобразится
			<h1>123</h1>
			</div>
		}
	)
}

--------------
key нужен когда мы рендерим список				
-------------------------

предположим я делаю кнопку в отдельном компоненте
в родительском компоненте пишу логику на клик, но и в компоненте с кнопкой мне надо деструктуризировать это свойство onClick
		function Button({name, onClick}) {
			return (
				<div>
					<button onClick={onClick}>{name}</button>
				</div>
			)
		}

-----------------------------------------
	Передаем пропс + Деструктуризация
		родительсткий компонент
		......
		<Component coloProp="blue" someProp="abc" />

		компонент Component

		const Component = ({coloProp, someProp}) => {  // Для того, чтобы копонент принял пропс, в аргументах должно присутвовать пропс
		    return(
		    < div color={coloProp}>
		    {someProp}
		    </div>
		    )                                                //const Component = (props) => {}, но можно деструктуризировать сразу нужные нам пропсы.
		}


		а если будем переделывать компонент в класс, тогда в нем, внутри рендера нужно объявить
		this.props; 
		и обращаться к ним уже this.props.coloProp и тп. либо сделать деструктуризацию.
		{coloProp, someProp} = this.props;

	State:
		
		import React, { Component } from "react";
		class Button extends Component {
		  state = {       									// задаем изначальный стейт
		    isOpen: false
		  };

		handleClick = () => {                              // функция которая меняет стейт
	      this.setState({
	        isOpen: !this.state.isOpen
	      });

		 render() {
		    // const {title} = this.props 					//поркидываем пропсы в классовом компоненте
		    const text = this.state.isOpen && <p>some text</p>; // если наш стейт тру, тогда отрисовываем параграф
		    
		};

		return (
	      <div>
	        <button onClick={this.handleClick}>			//если стейт тру то название кнопки close если стейт фолс то название кнопки open
	          {this.state.isOpen ? "close" : "open"} 	// вечно забываю про this.state
	        </button>
	        {text}
	      </div>
		    );
		  }
		}

		export default Button;	
----------------------------------------------
когда много импортов например картинок image_01 image_02 и тд:
	мы можем их заимпортить циклом
		например:
			const levels = []  								// создаем пустой массив
			for(i = 1; i <=11; i++){
				const image = require(`../images/${i.toString().padStart(2, '0').svg}`)		// padStart(2, '0') добавит нули если меньше 10(тоесть будет 																				01, 02 и тд)
				levels.push(image);							
			}		
			levels.push(someElseImg);					// добавим в конец картинку с другим названием

---------------------------------------------------
rfce - создание функциональной компоненты			

---------------------------------
уменьшить или увеличить
				import React from "react";
				import "./styles.css";

				class App extends React.Component {
				  state = {
				    temp: 1    //начальный state
				  };

				  plus = () => {
				    this.setState({
				      temp: this.state.temp + 1 // вечно тут забываю добавить this.state
				    });
				  };

				  minus = () => {
				    this.setState({
				      temp: this.state.temp - 1
				    });
				  };

				  render() {
				    return (
				      <div className="App">
				        <span>{this.state.temp}</span>       // вывод на экран текущего state
				        <button onClick={this.plus}>+</button>
				        <button onClick={this.minus}>-</button>
				      </div>
				    );
				  }
				}

			export default App;

------------
получить доступ к инпуту
	в дочернем элементе(Input) через десруктуризацию передаём пропсы
		
		const Input = ({ onChange, value, name, placeholder }) => {
		  return (
		    <div>
		      <input
		        onChange={onChange}
		        value={value}
		        name={name}
		        placeholder={placeholder}
		      />
		    </div>
		  );
		};
	в родительском элементе:

	class App extends React.Component {
	  state = {
	    value: ""    // задаем начальное значение value
	  };

	  onChangeHandle = event => {
	    this.setState({
	      value: event.target.value         // добираемся до значения инпута
	    });
	  };

	  render() {
	    return (
	      <div className="App">
	        <Input value={this.state.value} onChange={this.onChangeHandle} />  // onChange и value обязательно должен быть в дочернем компоненте
	        <p>your text: {this.state.value}</p>  // выводим значение на экран
	      </div>
	    );
	  }
	}

----------------------
условия в реакт
	
	class App extends React.Component {
	  state = {
	    show: true,
	    name: "Иван"
	  };
	  render() {
	    return (
	      <div>
	        {this.state.show ? "привет" : "пока"},
	        {this.state.name}
	      </div>
	    );
	  }
	}


	пример условия с переменной:

	class App extends React.Component {
	  state = {
	    name: "Иван",
	    age: 25,
	    show: false
	  };

	  one = () => {
	    this.setState({
	      show: !this.state.show
	    });
	  };

	  render() {
	    if (this.state.show) {
	      var text = (                   // если использовать let const то все ломается
	        <p>
	          {this.state.name} {this.state.age}
	        </p>
	      );
	    }
	    return (
	      <div className="App">
	        <h1>dsfg</h1>
	        {text}
	        <button onClick={this.one}>{this.state.show ? "спрятать" : "показать"}</button>
	      </div>
	    );
	  }
	}	

-------------------------


вывод списка из state
	
	class App extends React.Component {
	  state = {
	    lists: ["1", "2", "3"]
	  };

	  render() {
	    const list = this.state.lists.map((list, index) => { // выносим в переменную
	      return <li key={index}>{list}</li>;    // не забывать return
	    });

	    return (
	      <div className="App">
	        <h1>list</h1>
	        <ul>{list}</ul>
	      </div>
	    );
	  }
	}


-----------------

пример закрытия модального окна на крестик с использованием хуков:
const AboutBox = ( {title, link} ) => {

    const [isModalOpen, setIsModalOpen] = useState(true);

    return (
        <Fragment>
        {isModalOpen && (
        <div className="aboutBox__more">
            <img onClick={ () => setIsModalOpen(false) } src={closeIcon} alt="closeBtn"/>
            
            <h2>{title}</h2>
            {title==="Подробнее" || title==='Премии' ? 'Больше информации можно получить на сайте википедия, нажав на ссылку ниже' : 'Перейдя по ссылке ниже, вы увидите список ток 15 мультфильмов от компании walt disney'}
            <a className="aboutBox__more--link" href={link} rel="nofollow" target="_blank">клик</a>
        </div>
        )}  
        </Fragment>
    )
}

----------------------

rac - es6 компонент
rcfe - es6 без конст
href добавляем rel="noopener noreferrer" 

----------------------
пример map с путями для картинок
 {this.state.ninjas.map((ninja, index) => {
                return <li key={index}><Link to={ninja.link}>{ninja.name}<img src={require(`../../assets/img/${ninja.src}.png`)} alt={ninja.name}/></Link></li>
            })}

-----------------
пример динамического класса	
	<div 
		className={`tabs__item ${this.state.tabFedor ? 'tabs__item--active' : ''}`}                       
		onClick={this.handleFedor}
		>дядя Фёдор
	</div>
				





actions.js
conteiners
high order components
reducer
http://old.code.mu/tasks/advanced/javascript/react/rabota-s-jsx-v-frejmvorke-react.html ---- задачки на основу
https://learn-reactjs.ru/		
		
		
		
		